{"version":3,"sources":["webpack:///./src/views/management/index.vue","webpack:///./src/components/HeadTop.vue","webpack:///./src/components/HeadTop.vue?766b","webpack:///./src/utils/config.js","webpack:///./src/views/management/index.vue?2eba","webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./src/views/management/index.vue?c2e5","webpack:///./node_modules/core-js/internals/this-number-value.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./src/components/HeadTop.vue?fec0","webpack:///./node_modules/core-js/internals/inherit-if-required.js","webpack:///./node_modules/bignumber.js/bignumber.js","webpack:///./node_modules/core-js/modules/es.number.constructor.js","webpack:///./node_modules/core-js/modules/es.number.to-fixed.js","webpack:///./src/views/management/index.vue?b423"],"names":["class","style","Headtype","title","$t","type","min","center","clearable","placeholder","button","size","setMinAmount","maxAmount","max","setMaxAmount","recivedAddress","setReceiveAddress","rate","setRate","left-text","headerActive","left-arrow","left","right","address","substring","length","initWallet","components","props","String","default","setup","store","t","data","state","accounts","web3","provider","open","local","toLowerCase","changeLanuage","val","initContract","initData","ballance","initWeb3","location","reload","openUrl","url","window","href","document","addEventListener","scrollTop","documentElement","body","refData","render","__scopeId","config","TokenAddress","SeeleAddress","HeadTop","denominator","seeleContract","seeleTokenContract","eth","Contract","seeleAbi","gasnum","getDenominator","getMaxAmount","methods","call","decimals","Number","Math","pow","toFixed","minAmount","multipliedBy","toast0","loading","duration","forbidClick","message","send","from","then","receipt","clear","catch","err","toast2","toast1","toInteger","requireObjectCoercible","module","exports","repeat","count","str","this","result","n","Infinity","RangeError","classof","value","TypeError","whitespaces","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","replace","start","end","trim","isObject","setPrototypeOf","dummy","Wrapper","NewTarget","NewTargetPrototype","constructor","prototype","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","b","alphabet","c","caseChanged","e","i","isNum","len","x","_isBigNumber","s","slice","test","charCodeAt","indexOf","search","intCheck","round","DEBUG","Error","charAt","toUpperCase","push","format","rm","id","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","args","method","m","normalise","j","pop","sd","r","d","k","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","a","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","y","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","zs","DESCRIPTORS","global","isForced","redefine","has","inheritIfRequired","toPrimitive","fails","create","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","NUMBER","NativeNumber","NumberPrototype","BROKEN_CLASSOF","argument","first","third","radix","maxCode","digits","index","code","it","parseInt","key","NumberWrapper","keys","$","thisNumberValue","nativeToFixed","acc","log","x2","c2","divide","dataToString","FORCED","target","proto","forced","fractionDigits","number","fractDigits"],"mappings":"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","file":"static/js/chunk-d7537a36.0bb80cd3.js","sourcesContent":["<template>\r\n  <div class=\"index-bg zui-management\">\r\n    <HeadTop :Headtype=\"Headtype\" :title=\"$t('management.合約管理')\"></HeadTop>\r\n    <div class=\"p15\" style=\"overflow: hidden; padding-bottom: 30px;\">\r\n      <div class=\"manage-box\">\r\n        <div class=\"manage-title\">{{ $t('management.最小兌換數量') }}</div>\r\n        <van-field\r\n          type=\"number\"\r\n          v-model=\"min\"\r\n          center\r\n          clearable\r\n          :placeholder=\"$t('management.輸入最小兌換數量')\">\r\n          <template #button>\r\n            <van-button size=\"small\" type=\"primary\" style=\"width: 60px; font-size: 13px;\" @click=\"setMinAmount\">保存</van-button>\r\n          </template>\r\n        </van-field>\r\n      </div>\r\n      <div class=\"manage-box\">\r\n        <div class=\"manage-title\">{{ $t('management.單筆兌換限額') }}: {{ maxAmount }}</div>\r\n        <van-field\r\n            type=\"number\"\r\n            v-model=\"max\"\r\n            center\r\n            clearable\r\n            :placeholder=\"$t('management.輸入單筆兌換限額')\">\r\n          <template #button>\r\n            <van-button size=\"small\" type=\"primary\" style=\"width: 60px; font-size: 13px;\" @click=\"setMaxAmount\">保存</van-button>\r\n          </template>\r\n        </van-field>\r\n      </div>\r\n      <div class=\"manage-box\">\r\n        <div class=\"manage-title\">{{ $t('management.接收地址') }}</div>\r\n        <van-field\r\n            v-model.trim=\"recivedAddress\"\r\n            center\r\n            clearable\r\n            :placeholder=\"$t('management.輸入接收地址')\">\r\n          <template #button>\r\n            <van-button size=\"small\" type=\"primary\" style=\"width: 60px; font-size: 13px;\" @click=\"setReceiveAddress\">保存</van-button>\r\n          </template>\r\n        </van-field>\r\n      </div>\r\n      <div class=\"manage-box\">\r\n        <div class=\"manage-title\">{{ $t('management.手續費占比') }}</div>\r\n        <van-field\r\n          type=\"number\"\r\n          v-model=\"rate\"\r\n          center\r\n          clearable\r\n          :placeholder=\"$t('management.手續費占比提示')\">\r\n          <template #button>\r\n            <van-button size=\"small\" type=\"primary\" style=\"width: 60px; font-size: 13px;\" @click=\"setRate\">保存</van-button>\r\n          </template>\r\n        </van-field>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { Toast } from 'vant';\r\nimport HeadTop from '@/components/HeadTop'\r\nimport { reactive, toRefs, computed, watch } from \"vue\";\r\nimport { useI18n } from \"vue-i18n\";\r\nimport {useStore} from \"vuex\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport config from \"@/utils/config\";\r\nimport seeleAbi from \"@/utils/seeleAbi\";\r\nimport tokenAbi from \"@/utils/abi\";\r\nexport default {\r\n  components: {\r\n    HeadTop\r\n  },\r\n  setup() {\r\n    const store = useStore()\r\n    const { t } = useI18n()\r\n    const data = reactive({\r\n      $t: t,\r\n      Headtype: 'back',\r\n      maxAmount: '0.00',\r\n      min: '',\r\n      max: '',\r\n      recivedAddress: '',\r\n      rate: '',\r\n      denominator: '',\r\n      seeleContract: null,\r\n      seeleTokenContract: null,\r\n      address: computed(() => store.state.accounts[0]),\r\n      web3: computed(() => store.state.provider),\r\n      initContract: () => {\r\n        data.seeleContract = new data.web3.eth.Contract(seeleAbi, config.SeeleAddress)\r\n        data.seeleTokenContract = new data.web3.eth.Contract(tokenAbi, config.TokenAddress)\r\n        data.initData()\r\n      },\r\n      initData: () => {\r\n        data.min = ''\r\n        data.max = ''\r\n        data.recivedAddress = ''\r\n        data.gasnum = ''\r\n        data.getDenominator()\r\n        data.getMaxAmount()\r\n      },\r\n      getDenominator: async () => {\r\n        // let rate = await data.seeleContract.methods.rate().call()\r\n        let denominator = await data.seeleContract.methods.denominator().call()\r\n        // console.log(rate)\r\n        // console.log(denominator)\r\n        data.denominator = denominator\r\n      },\r\n      getMaxAmount: async () => {\r\n        let maxAmount = await data.seeleContract.methods.maxAmount().call()\r\n        let decimals = await data.seeleTokenContract.methods.decimals().call()\r\n        data.maxAmount = Number(maxAmount/Math.pow(10, decimals)).toFixed(2)\r\n      },\r\n      setMinAmount: async () => {\r\n        if (!data.address) {\r\n          Toast(data.$t('management.請先連接錢包'))\r\n          return\r\n        }\r\n        if (!data.min) {\r\n          Toast(data.$t('management.輸入最小兌換數量'))\r\n          return\r\n        }\r\n        if (Number(data.min) < 0) {\r\n          Toast(data.$t('management.最小數量需大於0'))\r\n          return\r\n        }\r\n        let decimals = await data.seeleTokenContract.methods.decimals().call()\r\n        let minAmount = new BigNumber(data.min).multipliedBy(Math.pow(10, decimals)).toFixed()\r\n        const toast0 = Toast.loading({\r\n          duration: 0,\r\n          forbidClick: true,\r\n          message: '保存中...',\r\n        });\r\n        await data.seeleContract.methods.setMinAmount(\r\n          minAmount\r\n        ).send({\r\n          from: data.address\r\n        }).then(receipt => {\r\n          toast0.clear()\r\n          Toast(data.$t('management.保存成功'))\r\n          data.initData()\r\n          console.log(receipt)\r\n        }).catch(err => {\r\n          toast0.clear()\r\n          Toast(data.$t('management.保存失敗'))\r\n          console.error(err)\r\n        })\r\n      },\r\n      setMaxAmount: async () => {\r\n        if (!data.address) {\r\n          Toast(data.$t('management.請先連接錢包'))\r\n          return\r\n        }\r\n        if (!data.max) {\r\n          Toast(data.$t('management.輸入單筆兌換限額'))\r\n          return\r\n        }\r\n        if (Number(data.max) < 0) {\r\n          Toast(data.$t('management.最小數量需大於0'))\r\n          return\r\n        }\r\n        let decimals = await data.seeleTokenContract.methods.decimals().call()\r\n        let maxAmount = new BigNumber(data.max).multipliedBy(Math.pow(10, decimals)).toFixed()\r\n        const toast0 = Toast.loading({\r\n          duration: 0,\r\n          forbidClick: true,\r\n          message: '保存中...',\r\n        });\r\n        await data.seeleContract.methods.setMaxAmount(\r\n            maxAmount\r\n        ).send({\r\n          from: data.address\r\n        }).then(receipt => {\r\n          toast0.clear()\r\n          Toast(data.$t('management.保存成功'))\r\n          data.initData()\r\n          console.log(receipt)\r\n        }).catch(err => {\r\n          toast0.clear()\r\n          Toast(data.$t('management.保存失敗'))\r\n          console.error(err)\r\n        })\r\n      },\r\n      setRate: async () => {\r\n        if (!data.address) {\r\n          Toast(data.$t('management.請先連接錢包'))\r\n          return\r\n        }\r\n        if (!data.rate) {\r\n          Toast(data.$t('management.請輸入手續費占比'))\r\n          return\r\n        }\r\n        if (Number(data.rate) < 0) {\r\n          Toast(data.$t('management.最小數量需大於0'))\r\n          return\r\n        }\r\n        if (Number(data.rate) > Number(data.denominator)) {\r\n          Toast(data.$t('management.手續費占比不能大於') + data.denominator)\r\n          return\r\n        }\r\n        const toast2 = Toast.loading({\r\n          duration: 0,\r\n          forbidClick: true,\r\n          message: '保存中...',\r\n        });\r\n        await data.seeleContract.methods.setRate(\r\n          data.rate\r\n        ).send({\r\n          from: data.address\r\n        }).then(receipt => {\r\n          toast2.clear()\r\n          Toast(data.$t('management.保存成功'))\r\n          data.initData()\r\n          console.log(receipt)\r\n        }).catch(err => {\r\n          toast2.clear()\r\n          Toast(data.$t('management.保存失敗'))\r\n          console.error(err)\r\n        })\r\n      },\r\n      setReceiveAddress: async () => {\r\n        if (!data.address) {\r\n          Toast(data.$t('management.請先連接錢包'))\r\n          return\r\n        }\r\n        if (!data.recivedAddress) {\r\n          Toast(data.$t('management.輸入接收地址'))\r\n          return\r\n        }\r\n        const toast1 = Toast.loading({\r\n          duration: 0,\r\n          forbidClick: true,\r\n          message: '保存中...',\r\n        });\r\n        await data.seeleContract.methods.setReceiveAddress(\r\n          data.recivedAddress\r\n        ).send({\r\n          from: data.address\r\n        }).then(receipt => {\r\n          toast1.clear()\r\n          Toast(data.$t('management.保存成功'))\r\n          data.initData()\r\n          console.log(receipt)\r\n        }).catch(err => {\r\n          toast1.clear()\r\n          Toast(data.$t('management.保存失敗'))\r\n          console.error(err)\r\n        })\r\n      }\r\n    })\r\n    if (data.address) {\r\n      data.initContract()\r\n    }\r\n    watch(() => data.address, (val) => {\r\n      if (val) {\r\n        data.initContract()\r\n      }\r\n    })\r\n    const refData = toRefs(data);\r\n    return {\r\n      ...refData\r\n    };\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n.zui-management {\r\n  .van-cell {\r\n    background: #F9F9F9;\r\n    border-radius: 10px;\r\n  }\r\n}\r\n</style>\r\n<style lang=\"less\" scoped>\r\n.index-bg {\r\n  background: url(~@/assets/images/index-bg.jpg) no-repeat center top 46px;\r\n  background-size: 100% auto;\r\n  font-family: PingFang SC;\r\n  .manage-box {\r\n    margin-top: 15px;\r\n    box-sizing: border-box;\r\n    padding: 0 15px 20px;\r\n    background: #FFFFFF;\r\n    box-shadow: -1px 2.5px 10px 0px rgba(191, 211, 239, 0.38);\r\n    border-radius: 10px;\r\n    .manage-title {\r\n      font-size: 14px;\r\n      font-weight: bold;\r\n      color: #111111;\r\n      line-height: 1;\r\n      padding: 17.5px 0 12px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"head\">\r\n    <van-nav-bar :title=\"title\" left-text=\"\" :class=\"{'active': headerActive}\" left-arrow>\r\n      <template #left></template>\r\n      <template #right>\r\n        <div class=\"wallet-block\">\r\n          <span v-if=\"address\" class=\"address flex-center\">***{{address.substring(address.length - 4, address.length)}}</span>\r\n          <span v-else class=\"address flex\" @click=\"initWallet\">{{$t('web3.连接钱包')}}</span>\r\n        </div>\r\n      </template>\r\n    </van-nav-bar>\r\n  </div>\r\n<!--  <Footer></Footer>-->\r\n</template>\r\n\r\n<script>\r\nimport { reactive, toRefs, computed, watch } from \"vue\";\r\n// import Footer from \"@/components/Footer\";\r\nimport { useI18n } from \"vue-i18n\";\r\nimport {useStore} from \"vuex\";\r\nimport web3Data from \"@/utils/initWeb3\";\r\nimport { getLang, setLang } from \"@/utils/i18n\";\r\nexport default {\r\n  components: {},\r\n  props: {\r\n    Headtype: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n  },\r\n  setup(props) {\r\n    const store = useStore()\r\n    const { t } = useI18n()\r\n    const data = reactive({\r\n      $t: t,\r\n      address: computed(() => store.state.accounts[0]),\r\n      web3: computed(() => store.state.provider),\r\n      open: false,\r\n      Headtype: props.Headtype,\r\n      headerActive: 0,\r\n      title: props.title,\r\n      local: getLang().toLowerCase() || \"zh-cn\",\r\n      changeLanuage: (val) => {\r\n        setLang(val)\r\n        data.local = val\r\n      },\r\n      initContract: () => {\r\n        data.initData()\r\n      },\r\n      initData: () => {\r\n      },\r\n      initWallet: () => {\r\n        let ballance = web3Data.initWeb3()\r\n        if (ballance) {\r\n          location.reload()\r\n        }\r\n      },\r\n      openUrl: (url) => {\r\n        window.location.href = url;\r\n      }\r\n    })\r\n    document.addEventListener('scroll', function () {\r\n      let scrollTop = document.documentElement.scrollTop || document.body.scrollTop\r\n      data.headerActive = scrollTop > 30\r\n    })\r\n    if (data.address) {\r\n      data.initContract()\r\n    }\r\n     watch(() => data.address, (val) => {\r\n      if (val) {\r\n        data.initContract()\r\n      }\r\n    })\r\n    const refData = toRefs(data);\r\n    return {\r\n      ...refData\r\n    };\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n  .active{\r\n    background: #FFFFFF !important;\r\n  }\r\n  .wallet-block{\r\n    padding: 4px 0 4px 10px;\r\n    width: 108px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    .address{\r\n      overflow: hidden;\r\n      white-space:nowrap;\r\n      font-size: 14px;\r\n      color: #111111;\r\n      margin-left: 10px;\r\n    }\r\n  }\r\n  .menu-Block{\r\n    position: fixed;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, .5);\r\n    z-index: 600;\r\n    .menu-leftBlock{\r\n      position: fixed;\r\n      left: 0;\r\n      top: 0;\r\n      bottom: 0;\r\n      background: #fff;\r\n      right: 40%;\r\n      .menu-item{\r\n        padding: 14px 20px;\r\n        .menu-img{\r\n          width: 22px;\r\n          height: 22px;\r\n        }\r\n        .menu-tit{\r\n          font-size: 14px;\r\n          color: #222222;\r\n          margin-left: 20px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .back{\r\n    width: 10px !important;\r\n    height: 18px;\r\n  }\r\n</style>\r\n","import { render } from \"./HeadTop.vue?vue&type=template&id=ed91f0c6&scoped=true\"\nimport script from \"./HeadTop.vue?vue&type=script&lang=js\"\nexport * from \"./HeadTop.vue?vue&type=script&lang=js\"\n\nimport \"./HeadTop.vue?vue&type=style&index=0&id=ed91f0c6&lang=less&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-ed91f0c6\"\n\nexport default script","const config = {\r\n  // 测试\r\n  // TokenAddress: '0x9Da6Da6657151eAa86d13975Ba9374Bd6E647B1f',\r\n  // SeeleAddress: '0x470e0d62C89fF88459e9794eA6FEf68AD01c4C7e'\r\n  // 正式使用\r\n  TokenAddress: '0xB1e93236ab6073fdAC58adA5564897177D4bcC43',\r\n  SeeleAddress: '0xa76925430cAf8C887162077D9826733E8309C1D3'\r\n}\r\n\r\nexport default config;\r\n","import { render } from \"./index.vue?vue&type=template&id=748bcd94&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=748bcd94&lang=less\"\nimport \"./index.vue?vue&type=style&index=1&id=748bcd94&lang=less&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-748bcd94\"\n\nexport default script","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.es/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./index.vue?vue&type=style&index=0&id=748bcd94&lang=less\"","var classof = require('../internals/classof-raw');\n\n// `thisNumberValue` abstract operation\n// https://tc39.es/ecma262/#sec-thisnumbervalue\nmodule.exports = function (value) {\n  if (typeof value != 'number' && classof(value) != 'Number') {\n    throw TypeError('Incorrect invocation');\n  }\n  return +value;\n};\n","// a string of all valid unicode whitespaces\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./HeadTop.vue?vue&type=style&index=0&id=ed91f0c6&lang=less&scoped=true\"","var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof-raw');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar create = require('../internals/object-create');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar toInteger = require('../internals/to-integer');\nvar thisNumberValue = require('../internals/this-number-value');\nvar repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar nativeToFixed = 1.0.toFixed;\nvar floor = Math.floor;\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar multiply = function (data, n, c) {\n  var index = -1;\n  var c2 = c;\n  while (++index < 6) {\n    c2 += n * data[index];\n    data[index] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\n\nvar divide = function (data, n) {\n  var index = 6;\n  var c = 0;\n  while (--index >= 0) {\n    c += data[index];\n    data[index] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\n\nvar dataToString = function (data) {\n  var index = 6;\n  var s = '';\n  while (--index >= 0) {\n    if (s !== '' || index === 0 || data[index] !== 0) {\n      var t = String(data[index]);\n      s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;\n    }\n  } return s;\n};\n\nvar FORCED = nativeToFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !fails(function () {\n  // V8 ~ Android 4.3-\n  nativeToFixed.call({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.es/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toInteger(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(data, 0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(data, 1e7, 0);\n          j -= 7;\n        }\n        multiply(data, pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(data, 1 << 23);\n          j -= 23;\n        }\n        divide(data, 1 << j);\n        multiply(data, 1, 1);\n        divide(data, 2);\n        result = dataToString(data);\n      } else {\n        multiply(data, 0, z);\n        multiply(data, 1 << -e, 0);\n        result = dataToString(data) + repeat.call('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat.call('0', fractDigits - k) + result\n        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./index.vue?vue&type=style&index=1&id=748bcd94&lang=less&scoped=true\""],"sourceRoot":""}